name: Production

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

# This workflow does not support fixing old versions
# as this will break the latest and major tags

jobs:
  docker:
    name: Build & Deploy Docker
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Publish Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          # Latest tag ghcr.io/paddy313/wg-easy:latest
          tags: |
            ghcr.io/paddy313/wg-easy:latest
          cache-from: type=gha
          cache-to: type=gha,mode=min

  docs:
    name: Build & Deploy Docs
    runs-on: ubuntu-latest
    if: |
      github.repository_owner == 'wg-easy' &&
      startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    needs: docker
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.9
          cache: "pip"
          cache-dependency-path: docs/requirements.txt

      - name: Install Dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: Setup Git User
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Build Docs Website
        run: |
          cd docs
          git fetch origin gh-pages --depth=1 || true

          # Extract version numbers
          DOCS_VERSION=${GITHUB_REF#refs/tags/}  # e.g. v1.2.3 or v1.2.3-beta
          MINOR_VERSION=$(echo $DOCS_VERSION | cut -d. -f1,2)  # e.g. v1.2

          # Check if it's a stable release (only numbers, no '-')
          if [[ "$DOCS_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Stable release detected: $DOCS_VERSION"
            mike deploy --push --update-aliases $MINOR_VERSION latest
          else
            echo "Pre-release detected: $DOCS_VERSION"
            mike deploy --push --update-aliases Pre-release
          fi
